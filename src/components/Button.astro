---
import { cn } from '@/lib/utils'
import type { HTMLAttributes } from 'astro/types'
import { cva, type VariantProps } from 'class-variance-authority'
import { Icon } from 'astro-icon'

export type ButtonIconProps = {
  iconStart?: string | null
  iconEnd?: string | null
  hasIconOnly?: boolean
}

type Props = HTMLAttributes<'button'> &
  VariantProps<typeof buttonVariant> &
  ButtonIconProps

export const buttonVariant = cva(
  'relative inline-flex px-4 transform cursor-pointer items-center justify-center whitespace-nowrap rounded-full text-center font-bold no-underline transition-all duration-300 ease-in-out',
  {
    variants: {
      variant: {
        primary: 'bg-blue-500 text-white hover:bg-blue-700',
        secondary:
          'border-2 border-slate-700 text-slate-700 hover:text-blue-500 hover:border-blue-500',
        ghost: 'bg-transparent text-slate-700 hover:bg-slate-200',
        white: 'bg-white text-slate-700 hover:text-blue-500',
      },
      isFullWidth: {
        true: 'w-full',
      },
      size: {
        sm: 'h-8',
        md: 'h-12 px-6',
        lg: 'h-16 px-12 text-lg',
      },
      hasIconOnly: {
        true: 'px-2',
      },
    },
    compoundVariants: [
      { hasIconOnly: true, size: 'sm', class: 'h-8 w-8' },
      { hasIconOnly: true, size: 'md', class: 'h-12 w-12 px-0' },
      { hasIconOnly: true, size: 'lg', class: 'h-16 w-16' },
    ],
  }
)

const {
  variant = 'primary',
  size = 'md',
  type = 'button',
  iconStart = null,
  iconEnd = null,
  hasIconOnly = false,
  isFullWidth = false,
  ...props
} = Astro.props
---

<button
  class={cn(
    buttonVariant({ variant, size, hasIconOnly, isFullWidth }),
    {
      'disabled:cursor-not-allowed disabled:opacity-25':
        props.disabled === true,
    },
    props.class
  )}
  {...props}
  type={type}
>
  {iconStart && <Icon name={iconStart} class="h-4 w-4" />}
  <slot />
  {iconEnd && <Icon name={iconEnd} class="h-4 w-4" />}
</button>
